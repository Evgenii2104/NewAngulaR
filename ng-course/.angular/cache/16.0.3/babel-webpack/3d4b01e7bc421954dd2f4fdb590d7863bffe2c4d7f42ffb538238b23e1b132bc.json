{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, delay, map, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass CarsServise {\n  constructor(http) {\n    this.http = http;\n  }\n  getAppTitle() {\n    return this.http.get('http://localhost:3000/title').pipe(delay(2000), map(response => {\n      return response;\n    }), map(data => {\n      return data.value();\n    }));\n  }\n  getCars() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json: charset = utf8'\n    });\n    return this.http.get('http://localhost:3000/cars', {\n      headers: headers\n    }).pipe(map(response => {\n      return response;\n    }), catchError(error => {\n      return throwError(() => new Error(`Сервер не доступен`));\n    }));\n  }\n  addCar(carName) {\n    const data = {\n      name: carName,\n      color: 'blue'\n    };\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json: charset = utf8'\n    });\n    return this.http.post('http://localhost:3000/cars', data, {\n      headers: headers\n    }).pipe(map(response => {\n      return response;\n    }));\n  }\n  changeColor(car, color) {\n    car.color = color;\n    return this.http.put(`http://localhost:3000/cars/${car.id}`, car).pipe(map(responce => {\n      return responce;\n    }));\n  }\n  deleteCar(car) {\n    return this.http.delete(`http://localhost:3000/cars/${car.id}`).pipe(map(responce => {\n      return responce;\n    }));\n  }\n}\nCarsServise.ɵfac = function CarsServise_Factory(t) {\n  return new (t || CarsServise)(i0.ɵɵinject(i1.HttpClient));\n};\nCarsServise.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CarsServise,\n  factory: CarsServise.ɵfac\n});\nexport { CarsServise };","map":{"version":3,"names":["HttpHeaders","catchError","delay","map","throwError","CarsServise","constructor","http","getAppTitle","get","pipe","response","data","value","getCars","headers","error","Error","addCar","carName","name","color","post","changeColor","car","put","id","responce","deleteCar","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac"],"sources":["C:\\Users\\user\\Desktop\\тур\\задание 1\\Новая папка (2)\\основы java\\NewAngulaR\\ng-course\\src\\app\\cars.servise.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\"\r\nimport {catchError, delay, map, throwError} from \"rxjs\";\r\n\r\n\r\n@Injectable()\r\n\r\nexport class CarsServise {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAppTitle() {\r\n    return this.http.get('http://localhost:3000/title').pipe(\r\n      delay(2000),\r\n      map((response) => {\r\n        return  response\r\n      }), map((data) => {\r\n        return data.value()\r\n      })\r\n    )\r\n  }\r\n\r\n  getCars() {\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json: charset = utf8'\r\n    })\r\n    return this.http\r\n      .get('http://localhost:3000/cars', ({\r\n        headers: headers\r\n      }))\r\n      .pipe(\r\n        map((response) => {\r\n        return response\r\n      }), catchError((error) => {\r\n          return  throwError(() => new Error(`Сервер не доступен`))\r\n    })\r\n  )\r\n  }\r\n\r\n  addCar(carName: string) {\r\n    const data = {\r\n      name: carName,\r\n      color: 'blue',\r\n    }\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json: charset = utf8'\r\n    })\r\n    return this.http.post('http://localhost:3000/cars', data, ({\r\n      headers: headers\r\n    })).pipe(map((response) => {\r\n      return response\r\n    }))\r\n  }\r\n\r\n  changeColor(car: any, color: string) {\r\n   car.color = color\r\n    return this.http.put(`http://localhost:3000/cars/${car.id}`, (car)).pipe(map((responce) => {\r\n      return responce\r\n    }));\r\n  }\r\n\r\n  deleteCar(car: any) {\r\n    return this.http.delete(`http://localhost:3000/cars/${car.id}`).pipe(map((responce) => {\r\n      return responce\r\n    }));\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAoBA,WAAW,QAAO,sBAAsB;AAC5D,SAAQC,UAAU,EAAEC,KAAK,EAAEC,GAAG,EAAEC,UAAU,QAAO,MAAM;;;AAGvD,MAEaC,WAAW;EACtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,6BAA6B,CAAC,CAACC,IAAI,CACtDR,KAAK,CAAC,IAAI,CAAC,EACXC,GAAG,CAAEQ,QAAQ,IAAI;MACf,OAAQA,QAAQ;IAClB,CAAC,CAAC,EAAER,GAAG,CAAES,IAAI,IAAI;MACf,OAAOA,IAAI,CAACC,KAAK,EAAE;IACrB,CAAC,CAAC,CACH;EACH;EAEAC,OAAOA,CAAA;IACL,MAAMC,OAAO,GAAG,IAAIf,WAAW,CAAC;MAC9B,cAAc,EAAE;KACjB,CAAC;IACF,OAAO,IAAI,CAACO,IAAI,CACbE,GAAG,CAAC,4BAA4B,EAAG;MAClCM,OAAO,EAAEA;KACV,CAAE,CACFL,IAAI,CACHP,GAAG,CAAEQ,QAAQ,IAAI;MACjB,OAAOA,QAAQ;IACjB,CAAC,CAAC,EAAEV,UAAU,CAAEe,KAAK,IAAI;MACrB,OAAQZ,UAAU,CAAC,MAAM,IAAIa,KAAK,CAAC,oBAAoB,CAAC,CAAC;IAC/D,CAAC,CAAC,CACH;EACD;EAEAC,MAAMA,CAACC,OAAe;IACpB,MAAMP,IAAI,GAAG;MACXQ,IAAI,EAAED,OAAO;MACbE,KAAK,EAAE;KACR;IACD,MAAMN,OAAO,GAAG,IAAIf,WAAW,CAAC;MAC9B,cAAc,EAAE;KACjB,CAAC;IACF,OAAO,IAAI,CAACO,IAAI,CAACe,IAAI,CAAC,4BAA4B,EAAEV,IAAI,EAAG;MACzDG,OAAO,EAAEA;KACV,CAAE,CAACL,IAAI,CAACP,GAAG,CAAEQ,QAAQ,IAAI;MACxB,OAAOA,QAAQ;IACjB,CAAC,CAAC,CAAC;EACL;EAEAY,WAAWA,CAACC,GAAQ,EAAEH,KAAa;IAClCG,GAAG,CAACH,KAAK,GAAGA,KAAK;IAChB,OAAO,IAAI,CAACd,IAAI,CAACkB,GAAG,CAAC,8BAA8BD,GAAG,CAACE,EAAE,EAAE,EAAGF,GAAG,CAAE,CAACd,IAAI,CAACP,GAAG,CAAEwB,QAAQ,IAAI;MACxF,OAAOA,QAAQ;IACjB,CAAC,CAAC,CAAC;EACL;EAEAC,SAASA,CAACJ,GAAQ;IAChB,OAAO,IAAI,CAACjB,IAAI,CAACsB,MAAM,CAAC,8BAA8BL,GAAG,CAACE,EAAE,EAAE,CAAC,CAAChB,IAAI,CAACP,GAAG,CAAEwB,QAAQ,IAAI;MACpF,OAAOA,QAAQ;IACjB,CAAC,CAAC,CAAC;EACL;;AAzDWtB,WAAW,C;mBAAXA,WAAW,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAX5B,WAAW,C;SAAXA,WAAW;EAAA6B,OAAA,EAAX7B,WAAW,CAAA8B;AAAA;SAAX9B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}