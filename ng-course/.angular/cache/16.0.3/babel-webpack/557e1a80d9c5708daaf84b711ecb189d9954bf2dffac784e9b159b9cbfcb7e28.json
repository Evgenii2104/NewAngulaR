{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, map, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass CarsServise {\n  constructor(http) {\n    this.http = http;\n  }\n  getCars() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json: charset = utf8'\n    });\n    return this.http.get('http://localhost:3100/cars', {\n      headers: headers\n    }).pipe(map(response => {\n      return response;\n    }), catchError(error => {\n      return throwError(() => new Error(`Текст ошибки`))('Сервер не доступен');\n    }));\n  }\n  addCar(carName) {\n    const data = {\n      name: carName,\n      color: 'blue'\n    };\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json: charset = utf8'\n    });\n    return this.http.post('http://localhost:3000/cars', data, {\n      headers: headers\n    }).pipe(map(response => {\n      return response;\n    }));\n  }\n  changeColor(car, color) {\n    car.color = color;\n    return this.http.put(`http://localhost:3000/cars/${car.id}`, car).pipe(map(responce => {\n      return responce;\n    }));\n  }\n  deleteCar(car) {\n    return this.http.delete(`http://localhost:3000/cars/${car.id}`).pipe(map(responce => {\n      return responce;\n    }));\n  }\n}\nCarsServise.ɵfac = function CarsServise_Factory(t) {\n  return new (t || CarsServise)(i0.ɵɵinject(i1.HttpClient));\n};\nCarsServise.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CarsServise,\n  factory: CarsServise.ɵfac\n});\nexport { CarsServise };","map":{"version":3,"names":["HttpHeaders","catchError","map","throwError","CarsServise","constructor","http","getCars","headers","get","pipe","response","error","Error","addCar","carName","data","name","color","post","changeColor","car","put","id","responce","deleteCar","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac"],"sources":["C:\\Users\\user\\Desktop\\тур\\задание 1\\Новая папка (2)\\основы java\\NewAngulaR\\ng-course\\src\\app\\cars.servise.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\"\r\nimport {catchError, map, observable, Observable, tap, throwError} from \"rxjs\";\r\nimport {error} from \"@angular/compiler-cli/src/transformers/util\";\r\nimport {ERROR} from \"@angular/compiler-cli/src/ngtsc/logging/src/console_logger\";\r\n\r\n@Injectable()\r\n\r\nexport class CarsServise {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getCars() {\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json: charset = utf8'\r\n    })\r\n    return this.http\r\n      .get('http://localhost:3100/cars', ({\r\n        headers: headers\r\n      }))\r\n      .pipe(\r\n        map((response) => {\r\n        return response\r\n      }), catchError((error) => {\r\n          return  throwError(() => new Error(`Текст ошибки`))('Сервер не доступен')\r\n    })\r\n  )\r\n  }\r\n\r\n  addCar(carName: string) {\r\n    const data = {\r\n      name: carName,\r\n      color: 'blue',\r\n    }\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json: charset = utf8'\r\n    })\r\n    return this.http.post('http://localhost:3000/cars', data, ({\r\n      headers: headers\r\n    })).pipe(map((response) => {\r\n      return response\r\n    }))\r\n  }\r\n\r\n  changeColor(car: any, color: string) {\r\n   car.color = color\r\n    return this.http.put(`http://localhost:3000/cars/${car.id}`, (car)).pipe(map((responce) => {\r\n      return responce\r\n    }));\r\n  }\r\n\r\n  deleteCar(car: any) {\r\n    return this.http.delete(`http://localhost:3000/cars/${car.id}`).pipe(map((responce) => {\r\n      return responce\r\n    }));\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAoBA,WAAW,QAAO,sBAAsB;AAC5D,SAAQC,UAAU,EAAEC,GAAG,EAA+BC,UAAU,QAAO,MAAM;;;AAI7E,MAEaC,WAAW;EACtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,OAAOA,CAAA;IACL,MAAMC,OAAO,GAAG,IAAIR,WAAW,CAAC;MAC9B,cAAc,EAAE;KACjB,CAAC;IACF,OAAO,IAAI,CAACM,IAAI,CACbG,GAAG,CAAC,4BAA4B,EAAG;MAClCD,OAAO,EAAEA;KACV,CAAE,CACFE,IAAI,CACHR,GAAG,CAAES,QAAQ,IAAI;MACjB,OAAOA,QAAQ;IACjB,CAAC,CAAC,EAAEV,UAAU,CAAEW,KAAK,IAAI;MACrB,OAAQT,UAAU,CAAC,MAAM,IAAIU,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,oBAAoB,CAAC;IAC/E,CAAC,CAAC,CACH;EACD;EAEAC,MAAMA,CAACC,OAAe;IACpB,MAAMC,IAAI,GAAG;MACXC,IAAI,EAAEF,OAAO;MACbG,KAAK,EAAE;KACR;IACD,MAAMV,OAAO,GAAG,IAAIR,WAAW,CAAC;MAC9B,cAAc,EAAE;KACjB,CAAC;IACF,OAAO,IAAI,CAACM,IAAI,CAACa,IAAI,CAAC,4BAA4B,EAAEH,IAAI,EAAG;MACzDR,OAAO,EAAEA;KACV,CAAE,CAACE,IAAI,CAACR,GAAG,CAAES,QAAQ,IAAI;MACxB,OAAOA,QAAQ;IACjB,CAAC,CAAC,CAAC;EACL;EAEAS,WAAWA,CAACC,GAAQ,EAAEH,KAAa;IAClCG,GAAG,CAACH,KAAK,GAAGA,KAAK;IAChB,OAAO,IAAI,CAACZ,IAAI,CAACgB,GAAG,CAAC,8BAA8BD,GAAG,CAACE,EAAE,EAAE,EAAGF,GAAG,CAAE,CAACX,IAAI,CAACR,GAAG,CAAEsB,QAAQ,IAAI;MACxF,OAAOA,QAAQ;IACjB,CAAC,CAAC,CAAC;EACL;EAEAC,SAASA,CAACJ,GAAQ;IAChB,OAAO,IAAI,CAACf,IAAI,CAACoB,MAAM,CAAC,8BAA8BL,GAAG,CAACE,EAAE,EAAE,CAAC,CAACb,IAAI,CAACR,GAAG,CAAEsB,QAAQ,IAAI;MACpF,OAAOA,QAAQ;IACjB,CAAC,CAAC,CAAC;EACL;;AA9CWpB,WAAW,C;mBAAXA,WAAW,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAX1B,WAAW,C;SAAXA,WAAW;EAAA2B,OAAA,EAAX3B,WAAW,CAAA4B;AAAA;SAAX5B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}