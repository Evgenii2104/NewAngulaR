{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"C:/Users/user/Desktop/\\u0442\\u0443\\u0440/\\u0437\\u0430\\u0434\\u0430\\u043D\\u0438\\u0435 1/\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430 (2)/\\u043E\\u0441\\u043D\\u043E\\u0432\\u044B java/NewAngulaR/ng-course/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAngularCompilerHost = exports.ensureSourceFileVersions = void 0;\nconst typescript_1 = __importDefault(require(\"typescript\"));\n// Temporary deep import for host augmentation support.\n// TODO: Move these to a private exports location or move the implementation into this package.\nconst {\n  augmentHostWithCaching,\n  augmentHostWithReplacements,\n  augmentProgramWithVersioning\n} = require('@ngtools/webpack/src/ivy/host');\n/**\n * Patches in-place the `getSourceFiles` function on an instance of a TypeScript\n * `Program` to ensure that all returned SourceFile instances have a `version`\n * field. The `version` field is required when used with a TypeScript BuilderProgram.\n * @param program The TypeScript Program instance to patch.\n */\nfunction ensureSourceFileVersions(program) {\n  augmentProgramWithVersioning(program);\n}\nexports.ensureSourceFileVersions = ensureSourceFileVersions;\nfunction createAngularCompilerHost(compilerOptions, hostOptions) {\n  // Create TypeScript compiler host\n  const host = typescript_1.default.createIncrementalCompilerHost(compilerOptions);\n  // The AOT compiler currently requires this hook to allow for a transformResource hook.\n  // Once the AOT compiler allows only a transformResource hook, this can be reevaluated.\n  host.readResource = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (filename) {\n      return this.readFile(filename) ?? '';\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  // Add an AOT compiler resource transform hook\n  host.transformResource = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function* (data, context) {\n      // Only style resources are transformed currently\n      if (context.type !== 'style') {\n        return null;\n      }\n      const result = yield hostOptions.transformStylesheet(data, context.containingFile, context.resourceFile ?? undefined);\n      return result ? {\n        content: result\n      } : null;\n    });\n    return function (_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  // Allow the AOT compiler to request the set of changed templates and styles\n  host.getModifiedResourceFiles = function () {\n    return hostOptions.modifiedFiles;\n  };\n  // Augment TypeScript Host for file replacements option\n  if (hostOptions.fileReplacements) {\n    augmentHostWithReplacements(host, hostOptions.fileReplacements);\n  }\n  // Augment TypeScript Host with source file caching if provided\n  if (hostOptions.sourceFileCache) {\n    augmentHostWithCaching(host, hostOptions.sourceFileCache);\n  }\n  return host;\n}\nexports.createAngularCompilerHost = createAngularCompilerHost;","map":{"version":3,"names":["_asyncToGenerator","require","default","__importDefault","mod","__esModule","Object","defineProperty","exports","value","createAngularCompilerHost","ensureSourceFileVersions","typescript_1","augmentHostWithCaching","augmentHostWithReplacements","augmentProgramWithVersioning","program","compilerOptions","hostOptions","host","createIncrementalCompilerHost","readResource","_ref","filename","readFile","_x","apply","arguments","transformResource","_ref2","data","context","type","result","transformStylesheet","containingFile","resourceFile","undefined","content","_x2","_x3","getModifiedResourceFiles","modifiedFiles","fileReplacements","sourceFileCache"],"sources":["C:/Users/user/Desktop/тур/задание 1/Новая папка (2)/основы java/NewAngulaR/ng-course/node_modules/@angular-devkit/build-angular/src/builders/browser-esbuild/angular/angular-host.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createAngularCompilerHost = exports.ensureSourceFileVersions = void 0;\nconst typescript_1 = __importDefault(require(\"typescript\"));\n// Temporary deep import for host augmentation support.\n// TODO: Move these to a private exports location or move the implementation into this package.\nconst { augmentHostWithCaching, augmentHostWithReplacements, augmentProgramWithVersioning, } = require('@ngtools/webpack/src/ivy/host');\n/**\n * Patches in-place the `getSourceFiles` function on an instance of a TypeScript\n * `Program` to ensure that all returned SourceFile instances have a `version`\n * field. The `version` field is required when used with a TypeScript BuilderProgram.\n * @param program The TypeScript Program instance to patch.\n */\nfunction ensureSourceFileVersions(program) {\n    augmentProgramWithVersioning(program);\n}\nexports.ensureSourceFileVersions = ensureSourceFileVersions;\nfunction createAngularCompilerHost(compilerOptions, hostOptions) {\n    // Create TypeScript compiler host\n    const host = typescript_1.default.createIncrementalCompilerHost(compilerOptions);\n    // The AOT compiler currently requires this hook to allow for a transformResource hook.\n    // Once the AOT compiler allows only a transformResource hook, this can be reevaluated.\n    host.readResource = async function (filename) {\n        return this.readFile(filename) ?? '';\n    };\n    // Add an AOT compiler resource transform hook\n    host.transformResource = async function (data, context) {\n        // Only style resources are transformed currently\n        if (context.type !== 'style') {\n            return null;\n        }\n        const result = await hostOptions.transformStylesheet(data, context.containingFile, context.resourceFile ?? undefined);\n        return result ? { content: result } : null;\n    };\n    // Allow the AOT compiler to request the set of changed templates and styles\n    host.getModifiedResourceFiles = function () {\n        return hostOptions.modifiedFiles;\n    };\n    // Augment TypeScript Host for file replacements option\n    if (hostOptions.fileReplacements) {\n        augmentHostWithReplacements(host, hostOptions.fileReplacements);\n    }\n    // Augment TypeScript Host with source file caching if provided\n    if (hostOptions.sourceFileCache) {\n        augmentHostWithCaching(host, hostOptions.sourceFileCache);\n    }\n    return host;\n}\nexports.createAngularCompilerHost = createAngularCompilerHost;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AANA,IAAAA,iBAAA,GAAAC,OAAA,mRAAAC,OAAA;AAOA,IAAIC,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,yBAAyB,GAAGF,OAAO,CAACG,wBAAwB,GAAG,KAAK,CAAC;AAC7E,MAAMC,YAAY,GAAGT,eAAe,CAACF,OAAO,CAAC,YAAY,CAAC,CAAC;AAC3D;AACA;AACA,MAAM;EAAEY,sBAAsB;EAAEC,2BAA2B;EAAEC;AAA8B,CAAC,GAAGd,OAAO,CAAC,+BAA+B,CAAC;AACvI;AACA;AACA;AACA;AACA;AACA;AACA,SAASU,wBAAwBA,CAACK,OAAO,EAAE;EACvCD,4BAA4B,CAACC,OAAO,CAAC;AACzC;AACAR,OAAO,CAACG,wBAAwB,GAAGA,wBAAwB;AAC3D,SAASD,yBAAyBA,CAACO,eAAe,EAAEC,WAAW,EAAE;EAC7D;EACA,MAAMC,IAAI,GAAGP,YAAY,CAACV,OAAO,CAACkB,6BAA6B,CAACH,eAAe,CAAC;EAChF;EACA;EACAE,IAAI,CAACE,YAAY;IAAA,IAAAC,IAAA,GAAAtB,iBAAA,CAAG,WAAgBuB,QAAQ,EAAE;MAC1C,OAAO,IAAI,CAACC,QAAQ,CAACD,QAAQ,CAAC,IAAI,EAAE;IACxC,CAAC;IAAA,iBAAAE,EAAA;MAAA,OAAAH,IAAA,CAAAI,KAAA,OAAAC,SAAA;IAAA;EAAA;EACD;EACAR,IAAI,CAACS,iBAAiB;IAAA,IAAAC,KAAA,GAAA7B,iBAAA,CAAG,WAAgB8B,IAAI,EAAEC,OAAO,EAAE;MACpD;MACA,IAAIA,OAAO,CAACC,IAAI,KAAK,OAAO,EAAE;QAC1B,OAAO,IAAI;MACf;MACA,MAAMC,MAAM,SAASf,WAAW,CAACgB,mBAAmB,CAACJ,IAAI,EAAEC,OAAO,CAACI,cAAc,EAAEJ,OAAO,CAACK,YAAY,IAAIC,SAAS,CAAC;MACrH,OAAOJ,MAAM,GAAG;QAAEK,OAAO,EAAEL;MAAO,CAAC,GAAG,IAAI;IAC9C,CAAC;IAAA,iBAAAM,GAAA,EAAAC,GAAA;MAAA,OAAAX,KAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;EAAA;EACD;EACAR,IAAI,CAACsB,wBAAwB,GAAG,YAAY;IACxC,OAAOvB,WAAW,CAACwB,aAAa;EACpC,CAAC;EACD;EACA,IAAIxB,WAAW,CAACyB,gBAAgB,EAAE;IAC9B7B,2BAA2B,CAACK,IAAI,EAAED,WAAW,CAACyB,gBAAgB,CAAC;EACnE;EACA;EACA,IAAIzB,WAAW,CAAC0B,eAAe,EAAE;IAC7B/B,sBAAsB,CAACM,IAAI,EAAED,WAAW,CAAC0B,eAAe,CAAC;EAC7D;EACA,OAAOzB,IAAI;AACf;AACAX,OAAO,CAACE,yBAAyB,GAAGA,yBAAyB"},"metadata":{},"sourceType":"script","externalDependencies":[]}